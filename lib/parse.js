"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.parseMultiple=exports.default=void 0;var _util=require("./util");var _parseVCard=_interopRequireDefault(require("./parsing/parseVCard"));var _parseJCard=_interopRequireDefault(require("./parsing/parseJCard"));var _parseMaggus=_interopRequireDefault(require("./parsing/parseMaggus"));var _unparseVCard=_interopRequireDefault(require("./unparsing/unparseVCard"));var _unparseJCard=_interopRequireDefault(require("./unparsing/unparseJCard"));var _unparseMaggus=_interopRequireDefault(require("./unparsing/unparseMaggus"));var _types=require("./types");function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key]}}}return target};return _extends.apply(this,arguments)}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function toMaggus(value){const ding=(0,_util).makeJson(value);if(typeof ding==="object"&&ding!=null){if(Array.isArray(ding)){return(0,_parseJCard).default(ding)}return(0,_parseMaggus).default(ding)}return(0,_parseVCard).default(ding)}function toFormatted(maggus,format,version){if(format==="vcard"){return(0,_unparseVCard).default(maggus,version)}if(format==="jcard"){return(0,_unparseJCard).default(maggus,version)}if(format==="maggus"){return(0,_unparseMaggus).default(maggus,version)}throw new Error(`toFormatted() received invalid format "${format}"`)}const toDataUrl=(value,mimeType)=>`data:${mimeType};charset=UTF-8,${encodeURIComponent(JSON.stringify(value))}`;const getMimeType=format=>{if(format==="vcard")return"text/vcard";if(format==="jcard")return"application/json";if(format==="maggus")return"application/json";throw new Error(`getMimeType() received invalid format "${format}"`)};function parse(value,options={}){const sache=_types.ParseOptionsZod.safeParse(options);if(sache.success===false){const errors=sache.error.issues.map(i=>new _types.VcfOptionsError(i.message+" for "+i.path[0],true));return{errors,data:null,meta:{format:null,version:null,status:"invalid"}}}const{toFormat,toVersion,urlEncode}=sache.data;const maggus=toMaggus(value);const result=toFormatted(maggus.data,toFormat,toVersion);const dater=urlEncode?toDataUrl(result,getMimeType(toFormat)):result;return _extends({},maggus,{data:dater})}var _default=parse;exports.default=_default;function parseMultiple(value,options={}){const vcards=value.match(_util.vcardPattern);return vcards.map(i=>parse(i,options))}exports.parseMultiple=parseMultiple
//# sourceMappingURL=data:application/json;base64,