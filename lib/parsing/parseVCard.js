"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.default=void 0;var _camelcase=_interopRequireDefault(require("camelcase"));var _core=require("./core");var _util=require("../util");var _types=require("../types");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function prepareVCard(line){const match=_util.propsPattern.exec(line);if(!match)return{name:"",props:null,value:"",group:null,errors:[new _types.VcfFormatError(`Misformatted vCard: failed to parse line "${line}"`,false),]};const[_,key="",propsStr="",value=""]=match;const property=key.includes(".")?key.split(".")[1]:key;const group=key.includes(".")?key.split(".")[0]:null;const propsArr=propsStr?propsStr.replace(/^;|;$/g,"").split(";"):[];const props=propsArr.reduce(_core.toProps,{});const name=(0,_camelcase).default(property);return{name,props,value,group,errors:[]}}function parseVCard(value){var ref;let errs=[];const lines=value.toString().replace(_util.whitespace,"").replace(_util.blankLines,"$1").replace(_util.foldedLines,"").split(_util.atLinebreaks);const begin=lines[0];const content=lines.slice(1,-1);const end=lines[lines.length-1];const{data,lineErrors}=content.reduce((0,_core).toData(prepareVCard),{data:{},lineErrors:[]});const version=((ref=data.version)==null?void 0:ref.length)?data.version[0].value:null;const versionErrs=(0,_util).validateVersion(version);if(!/BEGIN:VCARD/i.test(begin))errs.push(new _types.VcfFormatError(`Invalid vCard: expected "BEGIN:VCARD" but found "${begin}"`,true));if(!/END:VCARD/i.test(end))errs.push(new _types.VcfFormatError(`Invalid vCard: expected "END:VCARD" but found "${end}"`,true));const errors=[...errs,...versionErrs,...lineErrors];const status=(0,_util).getStatus(errors);return{errors,data,meta:{format:"vcard",version,status}}}var _default=parseVCard;exports.default=_default
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXJzaW5nL3BhcnNlVkNhcmQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNhbWVsQ2FzZSBmcm9tIFwiY2FtZWxjYXNlXCI7XG5cbmltcG9ydCB7IHRvUHJvcHMsIHRvRGF0YSB9IGZyb20gXCIuL2NvcmVcIjtcbmltcG9ydCB7XG4gIGF0TGluZWJyZWFrcyxcbiAgYmxhbmtMaW5lcyxcbiAgZm9sZGVkTGluZXMsXG4gIGdldFN0YXR1cyxcbiAgcHJvcHNQYXR0ZXJuLFxuICB3aGl0ZXNwYWNlLFxuICB2YWxpZGF0ZVZlcnNpb24sXG59IGZyb20gXCIuLi91dGlsXCI7XG5pbXBvcnQgeyBMaW5lLCBWY2ZFcnJvciwgVmNmRm9ybWF0RXJyb3IgfSBmcm9tIFwiLi4vdHlwZXNcIjtcblxuZnVuY3Rpb24gcHJlcGFyZVZDYXJkKGxpbmU6IHN0cmluZyk6IExpbmUge1xuICBjb25zdCBtYXRjaCA9IHByb3BzUGF0dGVybi5leGVjKGxpbmUpO1xuXG4gIGlmICghbWF0Y2gpXG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IFwiXCIsXG4gICAgICBwcm9wczogbnVsbCxcbiAgICAgIHZhbHVlOiBcIlwiLFxuICAgICAgZ3JvdXA6IG51bGwsXG4gICAgICBlcnJvcnM6IFtcbiAgICAgICAgbmV3IFZjZkZvcm1hdEVycm9yKFxuICAgICAgICAgIGBNaXNmb3JtYXR0ZWQgdkNhcmQ6IGZhaWxlZCB0byBwYXJzZSBsaW5lIFwiJHtsaW5lfVwiYCxcbiAgICAgICAgICBmYWxzZVxuICAgICAgICApLFxuICAgICAgXSxcbiAgICB9O1xuXG4gIGNvbnN0IFtfLCBrZXkgPSBcIlwiLCBwcm9wc1N0ciA9IFwiXCIsIHZhbHVlID0gXCJcIl0gPSBtYXRjaDtcblxuICBjb25zdCBwcm9wZXJ0eSA9IGtleS5pbmNsdWRlcyhcIi5cIikgPyAoa2V5LnNwbGl0KFwiLlwiKVsxXSBhcyBzdHJpbmcpIDoga2V5O1xuICBjb25zdCBncm91cCA9IGtleS5pbmNsdWRlcyhcIi5cIikgPyAoa2V5LnNwbGl0KFwiLlwiKVswXSBhcyBzdHJpbmcpIDogbnVsbDtcblxuICBjb25zdCBwcm9wc0FyciA9IHByb3BzU3RyID8gcHJvcHNTdHIucmVwbGFjZSgvXjt8OyQvZywgXCJcIikuc3BsaXQoXCI7XCIpIDogW107XG5cbiAgY29uc3QgcHJvcHMgPSBwcm9wc0Fyci5yZWR1Y2UodG9Qcm9wcywge30pO1xuXG4gIGNvbnN0IG5hbWUgPSBjYW1lbENhc2UocHJvcGVydHkpO1xuXG4gIHJldHVybiB7IG5hbWUsIHByb3BzLCB2YWx1ZSwgZ3JvdXAsIGVycm9yczogW10gfTtcbn1cblxuZnVuY3Rpb24gcGFyc2VWQ2FyZCh2YWx1ZTogYW55KTogYW55IHtcbiAgLy8gSW52YWxpZFBhcnNlUmVzdWx0IHwgVmFsaWRQYXJzZVJlc3VsdDxUPlxuICBsZXQgZXJyczogVmNmRXJyb3JbXSA9IFtdO1xuXG4gIGNvbnN0IGxpbmVzID0gdmFsdWVcbiAgICAudG9TdHJpbmcoKVxuICAgIC5yZXBsYWNlKHdoaXRlc3BhY2UsIFwiXCIpXG4gICAgLnJlcGxhY2UoYmxhbmtMaW5lcywgXCIkMVwiKVxuICAgIC5yZXBsYWNlKGZvbGRlZExpbmVzLCBcIlwiKVxuICAgIC5zcGxpdChhdExpbmVicmVha3MpO1xuXG4gIGNvbnN0IGJlZ2luID0gbGluZXNbMF07XG4gIGNvbnN0IGNvbnRlbnQgPSBsaW5lcy5zbGljZSgxLCAtMSk7XG4gIGNvbnN0IGVuZCA9IGxpbmVzW2xpbmVzLmxlbmd0aCAtIDFdO1xuXG4gIGNvbnN0IHsgZGF0YSwgbGluZUVycm9ycyB9ID0gY29udGVudC5yZWR1Y2UodG9EYXRhKHByZXBhcmVWQ2FyZCksIHtcbiAgICBkYXRhOiB7fSxcbiAgICBsaW5lRXJyb3JzOiBbXSxcbiAgfSk7XG5cbiAgY29uc3QgdmVyc2lvbiA9IGRhdGEudmVyc2lvbj8ubGVuZ3RoID8gZGF0YS52ZXJzaW9uWzBdLnZhbHVlIDogbnVsbDtcblxuICBjb25zdCB2ZXJzaW9uRXJycyA9IHZhbGlkYXRlVmVyc2lvbih2ZXJzaW9uKTtcblxuICBpZiAoIS9CRUdJTjpWQ0FSRC9pLnRlc3QoYmVnaW4pKVxuICAgIGVycnMucHVzaChcbiAgICAgIG5ldyBWY2ZGb3JtYXRFcnJvcihcbiAgICAgICAgYEludmFsaWQgdkNhcmQ6IGV4cGVjdGVkIFwiQkVHSU46VkNBUkRcIiBidXQgZm91bmQgXCIke2JlZ2lufVwiYCxcbiAgICAgICAgdHJ1ZVxuICAgICAgKVxuICAgICk7XG5cbiAgaWYgKCEvRU5EOlZDQVJEL2kudGVzdChlbmQpKVxuICAgIGVycnMucHVzaChcbiAgICAgIG5ldyBWY2ZGb3JtYXRFcnJvcihcbiAgICAgICAgYEludmFsaWQgdkNhcmQ6IGV4cGVjdGVkIFwiRU5EOlZDQVJEXCIgYnV0IGZvdW5kIFwiJHtlbmR9XCJgLFxuICAgICAgICB0cnVlXG4gICAgICApXG4gICAgKTtcblxuICBjb25zdCBlcnJvcnMgPSBbLi4uZXJycywgLi4udmVyc2lvbkVycnMsIC4uLmxpbmVFcnJvcnNdO1xuICBjb25zdCBzdGF0dXMgPSBnZXRTdGF0dXMoZXJyb3JzKTtcblxuICByZXR1cm4ge1xuICAgIGVycm9ycyxcbiAgICBkYXRhLFxuICAgIG1ldGE6IHtcbiAgICAgIGZvcm1hdDogXCJ2Y2FyZFwiLFxuICAgICAgdmVyc2lvbixcbiAgICAgIHN0YXR1cyxcbiAgICB9LFxuICB9O1xufVxuZXhwb3J0IGRlZmF1bHQgcGFyc2VWQ2FyZDtcbiJdLCJuYW1lcyI6WyJwcmVwYXJlVkNhcmQiLCJsaW5lIiwibWF0Y2giLCJwcm9wc1BhdHRlcm4iLCJleGVjIiwibmFtZSIsInByb3BzIiwidmFsdWUiLCJncm91cCIsImVycm9ycyIsIlZjZkZvcm1hdEVycm9yIiwiXyIsImtleSIsInByb3BzU3RyIiwicHJvcGVydHkiLCJpbmNsdWRlcyIsInNwbGl0IiwicHJvcHNBcnIiLCJyZXBsYWNlIiwicmVkdWNlIiwidG9Qcm9wcyIsImNhbWVsQ2FzZSIsInBhcnNlVkNhcmQiLCJkYXRhIiwiZXJycyIsImxpbmVzIiwidG9TdHJpbmciLCJ3aGl0ZXNwYWNlIiwiYmxhbmtMaW5lcyIsImZvbGRlZExpbmVzIiwiYXRMaW5lYnJlYWtzIiwiYmVnaW4iLCJjb250ZW50Iiwic2xpY2UiLCJlbmQiLCJsZW5ndGgiLCJsaW5lRXJyb3JzIiwidG9EYXRhIiwidmVyc2lvbiIsInZlcnNpb25FcnJzIiwidmFsaWRhdGVWZXJzaW9uIiwidGVzdCIsInB1c2giLCJzdGF0dXMiLCJnZXRTdGF0dXMiLCJtZXRhIiwiZm9ybWF0Il0sIm1hcHBpbmdzIjoiQUFBQSw0RkFBc0IsS0FBQSxVQUFXLGdDQUFYLFdBQVcsRUFBQSxBQUVELEtBQUEsS0FBUSxTQUFSLFFBQVEsQ0FBQSxBQVNqQyxLQUFBLEtBQVMsU0FBVCxTQUFTLENBQUEsQUFDK0IsS0FBQSxNQUFVLFNBQVYsVUFBVSxDQUFBLG1GQUV6RCxTQUFTQSxZQUFZLENBQUNDLElBQVksQ0FBUSxDQUN4QyxNQUFNQyxLQUFLLENBQUdDLEtBQVksYUFBQSxDQUFDQyxJQUFJLENBQUNILElBQUksQ0FBQyxBQUFDLEFBRXRDLElBQUksQ0FBQ0MsS0FBSyxDQUNSLE1BQU8sQ0FDTEcsSUFBSSxDQUFFLEVBQUUsQ0FDUkMsS0FBSyxDQUFFLElBQUksQ0FDWEMsS0FBSyxDQUFFLEVBQUUsQ0FDVEMsS0FBSyxDQUFFLElBQUksQ0FDWEMsTUFBTSxDQUFFLENBQ04sSUFBSUMsTUFBYyxlQUFBLENBQ2hCLENBQUMsMENBQTBDLEVBQUVULElBQUksQ0FBQyxDQUFDLENBQUMsQ0FDcEQsS0FBSyxDQUNOLEVBQ0YsQ0FDRixBQUFDLEFBRUosTUFBTSxDQUFDVSxDQUFDLENBQUVDLEdBQUcsQ0FBRyxFQUFFLENBQUVDLFFBQVEsQ0FBRyxFQUFFLENBQUVOLEtBQUssQ0FBRyxFQUFFLENBQUMsQ0FBR0wsS0FBSyxBQUFDLEFBRXZELE9BQU1ZLFFBQVEsQ0FBR0YsR0FBRyxDQUFDRyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUlILEdBQUcsQ0FBQ0ksS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMs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