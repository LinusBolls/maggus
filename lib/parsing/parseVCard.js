"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.default=void 0;var _camelcase=_interopRequireDefault(require("camelcase"));var _core=require("./core");var _util=require("../util");var _types=require("../types");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function prepareVCard(line){const match=_util.propsPattern.exec(line);if(!match)return{name:"",props:null,value:"",group:null,errors:[new _types.VcfFormatError(`Misformatted vCard: failed to parse line "${line}"`,false),]};const[_,key,propsStr,value]=match;const property=key.includes(".")?key.split(".")[1]:key;const group=key.includes(".")?key.split(".")[0]:null;const propsArr=propsStr?propsStr.replace(/^;|;$/g,"").split(";"):[];const props=propsArr.reduce(_core.toProps,{});const name=(0,_camelcase).default(property);return{name,props,value,group,errors:null}}function parseVCard(value){let errs=[];const lines=value.toString().replace(_util.whitespace,"").replace(_util.blankLines,"$1").replace(_util.foldedLines,"").split(_util.atLinebreaks);const begin=lines[0];const content=lines.slice(1,-1);const end=lines[lines.length-1];const{data,lineErrors}=content.reduce((0,_core).toData(prepareVCard),{data:{},lineErrors:[]});const version=data["version"][0].value;const versionErrs=(0,_util).validateVersion(version);if(!/BEGIN:VCARD/i.test(begin))errs.push(new _types.VcfFormatError(`Invalid vCard: expected "BEGIN:VCARD" but found "${begin}"`,true));if(!/END:VCARD/i.test(end))errs.push(new _types.VcfFormatError(`Invalid vCard: expected "END:VCARD" but found "${end}"`,true));const errors=[...errs,...versionErrs,...lineErrors];const status=(0,_util).getStatus(errors);return{errors,data,meta:{format:"vcard",version,status}}}var _default=parseVCard;exports.default=_default
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXJzaW5nL3BhcnNlVkNhcmQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNhbWVsQ2FzZSBmcm9tIFwiY2FtZWxjYXNlXCI7XG5cbmltcG9ydCB7IHRvUHJvcHMsIHRvRGF0YSB9IGZyb20gXCIuL2NvcmVcIjtcbmltcG9ydCB7XG4gIGF0TGluZWJyZWFrcyxcbiAgYmxhbmtMaW5lcyxcbiAgZm9sZGVkTGluZXMsXG4gIGdldFN0YXR1cyxcbiAgcHJvcHNQYXR0ZXJuLFxuICB3aGl0ZXNwYWNlLFxuICB2YWxpZGF0ZVZlcnNpb24sXG4gIGdldFByb3BlcnR5VHlwZSxcbn0gZnJvbSBcIi4uL3V0aWxcIjtcbmltcG9ydCB7XG4gIExpbmUsXG4gIFBhcnNlT3B0aW9ucyxcbiAgUGFyc2VSZXN1bHQsXG4gIFZjZkZvcm1hdEVycm9yLFxuICBWY2ZWZXJzaW9uRXJyb3IsXG59IGZyb20gXCIuLi90eXBlc1wiO1xuXG5mdW5jdGlvbiBwcmVwYXJlVkNhcmQobGluZTogc3RyaW5nKTogTGluZSB7XG4gIGNvbnN0IG1hdGNoID0gcHJvcHNQYXR0ZXJuLmV4ZWMobGluZSk7XG5cbiAgaWYgKCFtYXRjaClcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogXCJcIixcbiAgICAgIHByb3BzOiBudWxsLFxuICAgICAgdmFsdWU6IFwiXCIsXG4gICAgICBncm91cDogbnVsbCxcbiAgICAgIGVycm9yczogW1xuICAgICAgICBuZXcgVmNmRm9ybWF0RXJyb3IoXG4gICAgICAgICAgYE1pc2Zvcm1hdHRlZCB2Q2FyZDogZmFpbGVkIHRvIHBhcnNlIGxpbmUgXCIke2xpbmV9XCJgLFxuICAgICAgICAgIGZhbHNlXG4gICAgICAgICksXG4gICAgICBdLFxuICAgIH07XG5cbiAgY29uc3QgW18sIGtleSwgcHJvcHNTdHIsIHZhbHVlXSA9IG1hdGNoO1xuXG4gIGNvbnN0IHByb3BlcnR5ID0ga2V5LmluY2x1ZGVzKFwiLlwiKSA/IGtleS5zcGxpdChcIi5cIilbMV0gOiBrZXk7XG4gIGNvbnN0IGdyb3VwID0ga2V5LmluY2x1ZGVzKFwiLlwiKSA/IGtleS5zcGxpdChcIi5cIilbMF0gOiBudWxsO1xuXG4gIGNvbnN0IHByb3BzQXJyID0gcHJvcHNTdHIgPyBwcm9wc1N0ci5yZXBsYWNlKC9eO3w7JC9nLCBcIlwiKS5zcGxpdChcIjtcIikgOiBbXTtcbiAgY29uc3QgcHJvcHMgPSBwcm9wc0Fyci5yZWR1Y2UodG9Qcm9wcywge30pO1xuXG4gIGNvbnN0IG5hbWUgPSBjYW1lbENhc2UocHJvcGVydHkpO1xuXG4gIHJldHVybiB7IG5hbWUsIHByb3BzLCB2YWx1ZSwgZ3JvdXAsIGVycm9yczogbnVsbCB9O1xufVxuXG5mdW5jdGlvbiBwYXJzZVZDYXJkKHZhbHVlOiBzdHJpbmcpOiBQYXJzZVJlc3VsdCB7XG4gIGxldCBlcnJzOiBQYXJzZVJlc3VsdFtcImVycm9yc1wiXSA9IFtdO1xuXG4gIGNvbnN0IGxpbmVzID0gdmFsdWVcbiAgICAudG9TdHJpbmcoKVxuICAgIC5yZXBsYWNlKHdoaXRlc3BhY2UsIFwiXCIpXG4gICAgLnJlcGxhY2UoYmxhbmtMaW5lcywgXCIkMVwiKVxuICAgIC5yZXBsYWNlKGZvbGRlZExpbmVzLCBcIlwiKVxuICAgIC5zcGxpdChhdExpbmVicmVha3MpO1xuXG4gIGNvbnN0IGJlZ2luID0gbGluZXNbMF07XG4gIGNvbnN0IGNvbnRlbnQgPSBsaW5lcy5zbGljZSgxLCAtMSk7XG4gIGNvbnN0IGVuZCA9IGxpbmVzW2xpbmVzLmxlbmd0aCAtIDFdO1xuXG4gIGNvbnN0IHsgZGF0YSwgbGluZUVycm9ycyB9ID0gY29udGVudC5yZWR1Y2UodG9EYXRhKHByZXBhcmVWQ2FyZCksIHtcbiAgICBkYXRhOiB7fSxcbiAgICBsaW5lRXJyb3JzOiBbXSxcbiAgfSk7XG5cbiAgY29uc3QgdmVyc2lvbiA9IGRhdGFbXCJ2ZXJzaW9uXCJdWzBdLnZhbHVlO1xuXG4gIGNvbnN0IHZlcnNpb25FcnJzID0gdmFsaWRhdGVWZXJzaW9uKHZlcnNpb24pO1xuXG4gIGlmICghL0JFR0lOOlZDQVJEL2kudGVzdChiZWdpbikpXG4gICAgZXJycy5wdXNoKFxuICAgICAgbmV3IFZjZkZvcm1hdEVycm9yKFxuICAgICAgICBgSW52YWxpZCB2Q2FyZDogZXhwZWN0ZWQgXCJCRUdJTjpWQ0FSRFwiIGJ1dCBmb3VuZCBcIiR7YmVnaW59XCJgLFxuICAgICAgICB0cnVlXG4gICAgICApXG4gICAgKTtcblxuICBpZiAoIS9FTkQ6VkNBUkQvaS50ZXN0KGVuZCkpXG4gICAgZXJycy5wdXNoKFxuICAgICAgbmV3IFZjZkZvcm1hdEVycm9yKFxuICAgICAgICBgSW52YWxpZCB2Q2FyZDogZXhwZWN0ZWQgXCJFTkQ6VkNBUkRcIiBidXQgZm91bmQgXCIke2VuZH1cImAsXG4gICAgICAgIHRydWVcbiAgICAgIClcbiAgICApO1xuXG4gIGNvbnN0IGVycm9ycyA9IFsuLi5lcnJzLCAuLi52ZXJzaW9uRXJycywgLi4ubGluZUVycm9yc107XG4gIGNvbnN0IHN0YXR1cyA9IGdldFN0YXR1cyhlcnJvcnMpO1xuXG4gIHJldHVybiB7XG4gICAgZXJyb3JzLFxuICAgIGRhdGEsXG4gICAgbWV0YToge1xuICAgICAgZm9ybWF0OiBcInZjYXJkXCIsXG4gICAgICB2ZXJzaW9uLFxuICAgICAgc3RhdHVzLFxuICAgIH0sXG4gIH07XG59XG5leHBvcnQgZGVmYXVsdCBwYXJzZVZDYXJkO1xuIl0sIm5hbWVzIjpbInByZXBhcmVWQ2FyZCIsImxpbmUiLCJtYXRjaCIsInByb3BzUGF0dGVybiIsImV4ZWMiLCJuYW1lIiwicHJvcHMiLCJ2YWx1ZSIsImdyb3VwIiwiZXJyb3JzIiwiVmNmRm9ybWF0RXJyb3IiLCJfIiwia2V5IiwicHJvcHNTdHIiLCJwcm9wZXJ0eSIsImluY2x1ZGVzIiwic3BsaXQiLCJwcm9wc0FyciIsInJlcGxhY2UiLCJyZWR1Y2UiLCJ0b1Byb3BzIiwiY2FtZWxDYXNlIiwicGFyc2VWQ2FyZCIsImVycnMiLCJsaW5lcyIsInRvU3RyaW5nIiwid2hpdGVzcGFjZSIsImJsYW5rTGluZXMiLCJmb2xkZWRMaW5lcyIsImF0TGluZWJyZWFrcyIsImJlZ2luIiwiY29udGVudCIsInNsaWNlIiwiZW5kIiwibGVuZ3RoIiwiZGF0YSIsImxpbmVFcnJvcnMiLCJ0b0RhdGEiLCJ2ZXJzaW9uIiwidmVyc2lvbkVycnMiLCJ2YWxpZGF0ZVZlcnNpb24iLCJ0ZXN0IiwicHVzaCIsInN0YXR1cyIsImdldFN0YXR1cyIsIm1ldGEiLCJmb3JtYXQiXSwibWFwcGluZ3MiOiJBQUFBLDRGQUFzQixLQUFBLFVBQVcsZ0NBQVgsV0FBVyxFQUFBLEFBRUQsS0FBQSxLQUFRLFNBQVIsUUFBUSxDQUFBLEFBVWpDLEtBQUEsS0FBUyxTQUFULFNBQVMsQ0FBQSxBQU9ULEtBQUEsTUFBVSxTQUFWLFVBQVUsQ0FBQSxtRkFFakIsU0FBU0EsWUFBWSxDQUFDQyxJQUFZLENBQVEsQ0FDeEMsTUFBTUMsS0FBSyxDQUFHQyxLQUFZLGFBQUEsQ0FBQ0MsSUFBSSxDQUFDSCxJQUFJLENBQUMsQUFBQyxBQUV0QyxJQUFJLENBQUNDLEtBQUssQ0FDUixNQUFPLENBQ0xHLElBQUksQ0FBRSxFQUFFLENBQ1JDLEtBQUssQ0FBRSxJQUFJLENBQ1hDLEtBQUssQ0FBRSxFQUFFLENBQ1RDLEtBQUssQ0FBRSxJQUFJLENBQ1hDLE1BQU0sQ0FBRSxDQUNOLElBQUlDLE1BQWMsZUFBQSxDQUNoQixDQUFDLDBDQUEwQyxFQUFFVCxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQ3BELEtBQUssQ0FDTixFQUNGLENBQ0YsQUFBQyxBQUVKLE1BQU0sQ0FBQ1UsQ0FBQyxDQUFFQyxHQUFHLENBQUVDLFFBQVEsQ0FBRU4sS0FBSyxDQUFDLENBQUdMLEtBQUssQUFBQyxBQUV4QyxPQUFNWSxRQUFRLENBQUdGLEdBQUcsQ0FBQ0csUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFHSCxHQUFHLENBQUNJLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBR0osR0FBRyxBQUFDLEFBQzdELE9BQU1KLEtBQUssQ0FBR0ksR0FBRyxDQUFD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