"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.default=void 0;var _util=require("./util");var _types=require("./types");function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key]}return target}const toProp=(lineName,version)=>([propName,propValue])=>{if(["TEL","ADR","EMAIL"].includes(lineName)&&version==="2.1")return propValue.join(";");return(0,_util).capitalDashCase(propName)+"="+(0,_util).capitalDashCase(propValue.join(","))};const toLine=version=>([name,i])=>{const{value,props}=i;const{group}=props,restProps=_objectWithoutPropertiesLoose(props,["group"]);const lineName=(group?group+".":"")+(0,_util).capitalDashCase(name);const propStr=Object.entries(restProps).map(toProp(lineName,version)).join(";");const joinedProps=propStr?";"+propStr:"";const propsStr=["2.1","3.0"].includes(version)?joinedProps.toUpperCase():joinedProps;return lineName+propsStr+":"+value};const seperateSameValues=(prev,[name,values])=>[...prev,...values.map(i=>[name,i]),];function unparse(ding,options={}){const{version=_types.latestVcfVersion,isDataUrl=false,charset="UTF-8"}=options;const begin="BEGIN:VCARD";const content=Object.entries(ding).reduce(seperateSameValues,[]).map(toLine(version));const end="END:VCARD";const result=[begin,...content,end].join("\n");if(isDataUrl)return`data:text/vcard;charset=${charset},${result}`;return result}var _default=unparse;exports.default=_default
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91bnBhcnNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNhcGl0YWxEYXNoQ2FzZSB9IGZyb20gXCIuL3V0aWxcIjtcblxuaW1wb3J0IHtcbiAgc3VwcG9ydGVkVmNmVmVyc2lvbnMsXG4gIGxhdGVzdFZjZlZlcnNpb24sXG4gIFBhcnNlUmVzdWx0LFxuICBWY2ZGb3JtYXRFcnJvcixcbiAgVmNmVmVyc2lvbkVycm9yLFxuICBVbnBhcnNlT3B0aW9ucyxcbiAgVW5wYXJzZVJlc3VsdCxcbn0gZnJvbSBcIi4vdHlwZXNcIjtcblxuY29uc3QgdG9Qcm9wID1cbiAgKGxpbmVOYW1lOiBzdHJpbmcsIHZlcnNpb246IHN0cmluZykgPT5cbiAgKFtwcm9wTmFtZSwgcHJvcFZhbHVlXTogYW55KSA9PiB7XG4gICAgaWYgKFtcIlRFTFwiLCBcIkFEUlwiLCBcIkVNQUlMXCJdLmluY2x1ZGVzKGxpbmVOYW1lKSAmJiB2ZXJzaW9uID09PSBcIjIuMVwiKVxuICAgICAgcmV0dXJuIHByb3BWYWx1ZS5qb2luKFwiO1wiKTtcblxuICAgIHJldHVybiAoXG4gICAgICBjYXBpdGFsRGFzaENhc2UocHJvcE5hbWUpICsgXCI9XCIgKyBjYXBpdGFsRGFzaENhc2UocHJvcFZhbHVlLmpvaW4oXCIsXCIpKVxuICAgICk7XG4gIH07XG5cbmNvbnN0IHRvTGluZSA9XG4gICh2ZXJzaW9uOiBzdHJpbmcpID0+XG4gIChbbmFtZSwgaV0pID0+IHtcbiAgICBjb25zdCB7IHZhbHVlLCBwcm9wcyB9ID0gaTtcblxuICAgIGNvbnN0IHsgZ3JvdXAsIC4uLnJlc3RQcm9wcyB9ID0gcHJvcHM7XG5cbiAgICBjb25zdCBsaW5lTmFtZSA9IChncm91cCA/IGdyb3VwICsgXCIuXCIgOiBcIlwiKSArIGNhcGl0YWxEYXNoQ2FzZShuYW1lKTtcblxuICAgIGNvbnN0IHByb3BTdHIgPSBPYmplY3QuZW50cmllcyhyZXN0UHJvcHMpXG4gICAgICAubWFwKHRvUHJvcChsaW5lTmFtZSwgdmVyc2lvbikpXG4gICAgICAuam9pbihcIjtcIik7XG5cbiAgICBjb25zdCBqb2luZWRQcm9wcyA9IHByb3BTdHIgPyBcIjtcIiArIHByb3BTdHIgOiBcIlwiO1xuXG4gICAgY29uc3QgcHJvcHNTdHIgPSBbXCIyLjFcIiwgXCIzLjBcIl0uaW5jbHVkZXModmVyc2lvbilcbiAgICAgID8gam9pbmVkUHJvcHMudG9VcHBlckNhc2UoKVxuICAgICAgOiBqb2luZWRQcm9wcztcblxuICAgIHJldHVybiBsaW5lTmFtZSArIHByb3BzU3RyICsgXCI6XCIgKyB2YWx1ZTtcbiAgfTtcblxuLyoqXG4gKiBAZGVzYyB1c2VkIHRvIHNlcGVyYXRlIHRoZSBuZXN0ZWQganNvbiByZXByZXNlbnRhdGlvbiBpbnRvIG11bHRpcGxlIGxpbmVzLFxuICogZm9yIGV4YW1wbGUgbXVsdGlwbGUgcGhvbmUgbnVtYmVyc1xuICovXG5jb25zdCBzZXBlcmF0ZVNhbWVWYWx1ZXMgPSAocHJldiwgW25hbWUsIHZhbHVlc10pID0+IFtcbiAgLi4ucHJldixcbiAgLi4udmFsdWVzLm1hcCgoaSkgPT4gW25hbWUsIGldKSxcbl07XG5cbmZ1bmN0aW9uIHVucGFyc2UoZGluZzogYW55LCBvcHRpb25zOiBVbnBhcnNlT3B0aW9ucyA9IHt9KTogVW5wYXJzZVJlc3VsdCB7XG4gIGNvbnN0IHtcbiAgICB2ZXJzaW9uID0gbGF0ZXN0VmNmVmVyc2lvbixcbiAgICBpc0RhdGFVcmwgPSBmYWxzZSxcbiAgICBjaGFyc2V0ID0gXCJVVEYtOFwiLFxuICB9ID0gb3B0aW9ucztcblxuICBjb25zdCBiZWdpbiA9IFwiQkVHSU46VkNBUkRcIjtcblxuICBjb25zdCBjb250ZW50ID0gT2JqZWN0LmVudHJpZXMoZGluZylcbiAgICAucmVkdWNlKHNlcGVyYXRlU2FtZVZhbHVlcywgW10pXG4gICAgLm1hcCh0b0xpbmUodmVyc2lvbikpO1xuXG4gIGNvbnN0IGVuZCA9IFwiRU5EOlZDQVJEXCI7XG5cbiAgY29uc3QgcmVzdWx0ID0gW2JlZ2luLCAuLi5jb250ZW50LCBlbmRdLmpvaW4oXCJcXG5cIik7XG5cbiAgaWYgKGlzRGF0YVVybCkgcmV0dXJuIGBkYXRhOnRleHQvdmNhcmQ7Y2hhcnNldD0ke2NoYXJzZXR9LCR7cmVzdWx0fWA7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydCBkZWZhdWx0IHVucGFyc2U7XG4iXSwibmFtZXMiOlsidG9Qcm9wIiwibGluZU5hbWUiLCJ2ZXJzaW9uIiwicHJvcE5hbWUiLCJwcm9wVmFsdWUiLCJpbmNsdWRlcyIsImpvaW4iLCJjYXBpdGFsRGFzaENhc2UiLCJ0b0xpbmUiLCJuYW1lIiwiaSIsInZhbHVlIiwicHJvcHMiLCJncm91cCIsInJlc3RQcm9wcyIsInByb3BTdHIiLCJPYmplY3QiLCJlbnRyaWVzIiwibWFwIiwiam9pbmVkUHJvcHMiLCJwcm9wc1N0ciIsInRvVXBwZXJDYXNlIiwic2VwZXJhdGVTYW1lVmFsdWVzIiwicHJldiIsInZhbHVlcyIsInVucGFyc2UiLCJkaW5nIiwib3B0aW9ucyIsImxhdGVzdFZjZlZlcnNpb24iLCJpc0RhdGFVcmwiLCJjaGFyc2V0IiwiYmVnaW4iLCJjb250ZW50IiwicmVkdWNlIiwiZW5kIiwicmVzdWx0Il0sIm1hcHBpbmdzIjoiQUFBQSw0RkFBZ0MsS0FBQSxLQUFRLFNBQVIsUUFBUSxDQUFBLEFBVWpDLEtBQUEsTUFBUyxTQUFULFNBQVMsQ0FBQSwyUUFFaEIsTUFBTUEsTUFBTSxDQUNWLENBQUNDLFFBQWdCLENBQUVDLE9BQWUsR0FDbEMsQ0FBQyxDQUFDQyxRQUFRLENBQUVDLFNBQVMsQ0FBTSxHQUFLLENBQzlCLEdBQUksQ0FBQyxLQUFLLENBQUUsS0FBSyxDQUFFLE9BQU8sQ0FBQyxDQUFDQyxRQUFRLENBQUNKLFFBQVEsQ0FBQyxFQUFJQyxPQUFPLEdBQUssS0FBSyxDQUNqRSxPQUFPRSxTQUFTLENBQUNFLElBQUksQ0FBQyxHQUFHLENBQUMsQUFBQyxBQUU3QixPQUNFQyxDQUFBQSxFQUFBQSxLQUFlLEFBQVUsQ0FBQSxnQkFBVixDQUFDSixR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