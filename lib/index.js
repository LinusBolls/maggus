"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.default=void 0;var _util=require("./util");var _types=require("./types");var _parseVCard=_interopRequireDefault(require("./parsing/parseVCard"));var _parseJCard=_interopRequireDefault(require("./parsing/parseJCard"));var _parseMaggus=_interopRequireDefault(require("./parsing/parseMaggus"));var _unparseVCard=_interopRequireDefault(require("./unparsing/unparseVCard"));var _unparseJCard=_interopRequireDefault(require("./unparsing/unparseJCard"));var _unparseMaggus=_interopRequireDefault(require("./unparsing/unparseMaggus"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function toMaggus(value,format){if(format==="maggus")return(0,_parseMaggus).default(value);if(format==="vcard")return(0,_parseVCard).default(value);if(format==="jcard")return(0,_parseJCard).default(value);throw new Error(`toMaggus() received invalid format "${format}"`)}function toFormatted(maggus,format,version){if(format==="maggus")return(0,_unparseMaggus).default(maggus,version);if(format==="vcard")return(0,_unparseVCard).default(maggus,version);if(format==="jcard")return(0,_unparseJCard).default(maggus,version);throw new Error(`toFormatted() received invalid format "${format}"`)}const sache={version:[{value:"7.0",props:{},group:null}],fn:[{value:"3.0",props:{},group:null}]};function parse(value,options){const parsedOptions=_types.ParseOptionsZod.safeParse(options);if(parsedOptions.success===false){return{errors:parsedOptions.error.issues.map(_util.toVcfOptionsError),data:null,meta:{format:null,version:null,status:"invalid"}}}const{toFormat,toVersion,urlEncode}=parsedOptions.data;const jsonOrStr=(0,_util).tryToJson(value);const maggus=toMaggus(jsonOrStr,(0,_util).getFormat(jsonOrStr));if(maggus.data==null)return maggus;const result=toFormatted(maggus.data,toFormat,toVersion);const data=urlEncode?(0,_util).toDataUrl(result,(0,_util).getMimeType(toFormat)):result;return{errors:[],data,meta:maggus.meta}}var _default={parse};exports.default=_default
//# sourceMappingURL=data:application/json;base64,